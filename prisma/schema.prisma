// Prisma schema regenerated to match migrations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String?
  email      String   @unique
  password   String
  image      String?

  phone        String?
  location     String?
  bio          String?
  expertise    String?
  payment      String?
  taxId        String?
  portfolio    String?
  title        String?
  resume       String?
  coverLetter  String?

  projects      Project[]
  notifications Notification[]
  gigs          Gig[]
  coursesTaught Course[]      @relation("CourseTeacher")
  enrollments   Enrollment[]  @relation("EnrollmentStudent")
  goals         Goal[]
}

model Testimonial {
  id        Int     @id @default(autoincrement())
  name      String
  message   String
  avatarUrl String?
}

model Feature {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
}

model Solution {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  ctaText     String?
}

model Project {
  id        Int      @id @default(autoincrement())
  title     String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  status    String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Gig {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  category    String?
  thumbnail   String?
  rating      Float?
  status      String   @default("active")
  views       Int      @default(0)
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    Int
  createdAt   DateTime @default(now())
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  teacher     User      @relation("CourseTeacher", fields: [teacherId], references: [id])
  teacherId   Int
  nextSession DateTime?
  enrollments Enrollment[]
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  student   User    @relation("EnrollmentStudent", fields: [studentId], references: [id])
  studentId Int
  progress  Float   @default(0)
  grade     Float?
}

model Goal {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  target    Int
  current   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

