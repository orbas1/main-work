generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int               @id @default(autoincrement())
  name                String?
  email               String            @unique
  password            String
  phone               String?
  location            String?
  bio                 String?
  expertise           String?
  payment             String?
  taxId               String?
  portfolio           String?
  title               String?
  image               String?
  resume              String?
  coverLetter         String?
  notifications       Notification[]
  projects            Project[]
  subscriptions       Subscription[]
  paymentMethods      PaymentMethod[]
  transactions        Transaction[]
  chatParticipants    ChatParticipant[]
  messages            Message[]
  gigs                Gig[]
  clientContracts     Contract[]        @relation("ClientContracts")
  freelancerContracts Contract[]        @relation("FreelancerContracts")
}

model Testimonial {
  id        Int     @id @default(autoincrement())
  name      String
  message   String
  avatarUrl String?
}

model Project {
  id        Int      @id @default(autoincrement())
  title     String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  status    String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Subscription {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  plan        String
  status      String
  autoRenew   Boolean   @default(true)
  renewalDate DateTime?
  createdAt   DateTime  @default(now())
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  brand     String
  last4     String
  expMonth  Int
  expYear   Int
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Transaction {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  amount      Float
  currency    String   @default("USD")
  description String
  status      String
  createdAt   DateTime @default(now())
}

model Chat {
  id           Int               @id @default(autoincrement())
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ChatParticipant {
  id     Int  @id @default(autoincrement())
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Gig {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  category    String?
  thumbnail   String?
  rating      Float?
  status      String   @default("active")
  views       Int      @default(0)
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    Int
  createdAt   DateTime @default(now())
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  TERMINATED
}

enum MilestoneStatus {
  PENDING
  REVIEW
  APPROVED
  PAID
}

model Contract {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  client       User           @relation("ClientContracts", fields: [clientId], references: [id])
  clientId     Int
  freelancer   User           @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  freelancerId Int
  startDate    DateTime?
  endDate      DateTime?
  totalValue   Float
  status       ContractStatus @default(PENDING)
  milestones   Milestone[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Milestone {
  id         Int             @id @default(autoincrement())
  title      String
  amount     Float
  dueDate    DateTime?
  status     MilestoneStatus @default(PENDING)
  contract   Contract        @relation(fields: [contractId], references: [id])
  contractId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}
