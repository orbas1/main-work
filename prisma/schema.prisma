generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  jobSeeker
  employer
}

model User {
  id               Int               @id @default(autoincrement())
  name             String?
  email            String            @unique
  role             Role              @default(jobSeeker)
  password         String
  phone            String?
  location         String?
  bio              String?
  expertise        String?
  payment          String?
  taxId            String?
  portfolio        String?
  title            String?
  image            String?
  introVideo       String?
  resume           String?
  coverLetter      String?
  notifications    Notification[]
  projects         Project[]
  subscriptions    Subscription[]
  paymentMethods   PaymentMethod[]
  transactions     Transaction[]
  chatParticipants ChatParticipant[]
  messages         Message[]
  gigs             Gig[]
}

model Testimonial {
  id        Int     @id @default(autoincrement())
  name      String
  message   String
  avatarUrl String?
}

model Feature {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
}

model Solution {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  ctaText     String?
}

model Project {
  id        Int      @id @default(autoincrement())
  title     String
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  status    String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Subscription {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  plan        String
  status      String
  autoRenew   Boolean   @default(true)
  renewalDate DateTime?
  createdAt   DateTime  @default(now())
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  brand     String
  last4     String
  expMonth  Int
  expYear   Int
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Transaction {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  amount      Float
  currency    String   @default("USD")
  description String
  status      String
  createdAt   DateTime @default(now())
}

model Chat {
  id           Int               @id @default(autoincrement())
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ChatParticipant {
  id     Int  @id @default(autoincrement())
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Gig {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Int
  category    String?
  thumbnail   String?
  rating      Float?
  status      String   @default("active")
  views       Int      @default(0)
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    Int
  createdAt   DateTime @default(now())
}

model Job {
  id        Int      @id @default(autoincrement())
  title     String
  employer  User     @relation(fields: [employerId], references: [id])
  employerId Int
  applications Application[]
  createdAt DateTime @default(now())
}

model Application {
  id          Int      @id @default(autoincrement())
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       Int
  applicant   User     @relation(fields: [applicantId], references: [id])
  applicantId Int
  status      String   @default("pending")
  interviews  Interview[]
  createdAt   DateTime @default(now())
}

model Interview {
  id             Int       @id @default(autoincrement())
  application    Application @relation(fields: [applicationId], references: [id])
  applicationId  Int
  scheduledAt    DateTime
  location       String?
  link           String?
  status         String    @default("scheduled")
  notes          String?
  createdAt      DateTime  @default(now())
}

model Opportunity {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  employer    User     @relation(fields: [employerId], references: [id])
  employerId  Int
  skills      String?
  startDate   DateTime?
  endDate     DateTime?
  status      String   @default("open")
  createdAt   DateTime @default(now())
}

model NetworkingSession {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  host        User     @relation(fields: [hostId], references: [id])
  hostId      Int
  createdAt   DateTime @default(now())
}
